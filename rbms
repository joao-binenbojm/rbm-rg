{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"rbms","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyOKQqL2jDe29PQDTtE0k0xY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ZSeex1h6ttKJ","executionInfo":{"status":"ok","timestamp":1622210478179,"user_tz":-60,"elapsed":830,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}}},"source":["from utils import IsingModel1D, IsingModel2D\n","import numpy as np\n","from sklearn.neural_network import BernoulliRBM\n","import pandas as pd"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JAj1kkPJv_0Y","executionInfo":{"status":"ok","timestamp":1622210481437,"user_tz":-60,"elapsed":382,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}},"outputId":"ecec37e4-052c-4c8d-b24c-a1d5ccfb7dd5"},"source":["# Toy example: https://www.youtube.com/watch?v=Fkw0_aAtwIw&t=141s&ab_channel=DeepLearning.TVDeepLearning.TV\n","dummy_data = np.array([[1,0,1],\n","                       [0,1,0],\n","                       [1,0,1],\n","                       [1,0,1],\n","                       [0,1,0],\n","                       [1,0,1],\n","                       [0,1,0],\n","                       [1,0,1],\n","                       [1,0,1],\n","                       [1,0,1]])\n","\n","rbm = BernoulliRBM(n_components=2, n_iter=1000, learning_rate=0.01) # 2 hidden units\n","rbm.fit(dummy_data) # fitting rbm to dummy data generated\n","\n","def sig(X):\n","  return (1+np.exp(-X))**-1\n","\n","v = np.array([0,1,0])\n","\n","print(sig(rbm.intercept_hidden_[1] + np.dot(v,rbm.components_[1,:]))) # validating correct probability is being computed\n","\n","# checking the properties of the RBM after learning\n","print(rbm.transform(v.reshape(1,3)))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["0.3786459103216391\n","[[0.37435208 0.37864591]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OZshXa9hxpxx","executionInfo":{"status":"ok","timestamp":1622210922249,"user_tz":-60,"elapsed":208,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}}},"source":["# My own class representation of a deep belief network\n","class DBN:\n","  def __init__(self, n_rbms, n_components, learning_rates, n_iter=100, batch_size=50):\n","    self.rbms = [BernoulliRBM(n_components=n,learning_rate=lr,n_iter=n_iter, batch_size=batch_size) \\\n","            for n,lr in zip(n_components,learning_rates)] # initializing RBMs\n","    self.n_rbms = n_rbms\n","    self.n_components = n_components\n","  def fit(self, X):\n","    self.data = X\n","    rbm_input = X\n","    for i in range(self.n_rbms):\n","      self.rbms[i].fit(rbm_input) # training the given RBM\n","      rbm_input = self.rbms[i].h_samples_ # making the input to the next RBM the samples from the given RBM"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"La0fesDQRv0i","executionInfo":{"status":"ok","timestamp":1622211147319,"user_tz":-60,"elapsed":161,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}}},"source":["belief_net = DBN(n_rbms=2, n_components=[2,1], learning_rates=[0.01,0.01], n_iter=1000)\n","belief_net.fit(dummy_data)"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kkKkS8hoTSSc","executionInfo":{"status":"ok","timestamp":1622211148868,"user_tz":-60,"elapsed":7,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}},"outputId":"8c68db6a-93f2-485f-d6d9-135d596e589d"},"source":["rbm = BernoulliRBM(n_components=2, n_iter=1000, learning_rate=0.01) # 2 hidden units\n","rbm.fit(dummy_data)"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BernoulliRBM(batch_size=10, learning_rate=0.01, n_components=2, n_iter=1000,\n","             random_state=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4HSNNnMqTxFG","executionInfo":{"status":"ok","timestamp":1622211246141,"user_tz":-60,"elapsed":177,"user":{"displayName":"Joao Pereira","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjwssXubdHYcXh0ciV6oVCvfkRzirOHfun_eZ77wQ=s64","userId":"09393199067996446086"}},"outputId":"bfccb854-12c2-40a5-8a87-61a81e6f48b9"},"source":["print(rbm.components_)\n","print(belief_net.rbms[1].components_)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[[ 0.47899414 -0.48612042  0.47836332]\n"," [ 0.50121112 -0.5081297   0.50100155]]\n","[[0.78640546 0.08717174]]\n"],"name":"stdout"}]}]}